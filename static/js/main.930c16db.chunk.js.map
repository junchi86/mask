{"version":3,"sources":["component/main/partials/Header.js","component/main/partials/Footer.js","component/map/Map.js","component/map/MapGeo.js","component/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","NaverMapAPI","latLng","useState","storeData","setStoreData","position","setPosition","MaskData","a","axios","get","lat","lng","data","stores","console","log","useEffect","colorWheel","i","remain_stat","mapDivId","style","margin","width","height","defaultZoom","defaultCenter","center","onCenterChanged","_lat","_lng","onDragend","map","key","code","radius","fillOpacity","fillColor","strokeColor","clickable","onClick","alert","name","alertMessage","Map","ncpClientId","error","loading","MapGeo","setLatLng","askForCoords","navigator","geolocation","getCurrentPosition","latitude","coords","longitude","Main","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.930c16db.chunk.js","sourcesContent":["import React from 'react'\r\nimport './partials.css'\r\n\r\nfunction Header() {\r\n    return (\r\n        <>\r\n            <h1 className=\"header\">\r\n                Is there any Mask for me?\r\n            </h1>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport './partials.css'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <h1 className=\"footer\">\r\n            Made by JH Kim\r\n        </h1>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { RenderAfterNavermapsLoaded, NaverMap, Circle } from 'react-naver-maps'\r\nimport './map.css'\r\n\r\nfunction NaverMapAPI({ latLng }) {\r\n    const [storeData, setStoreData] = useState([])\r\n    const [position, setPosition] = useState(latLng)\r\n    const MaskData = async () => {\r\n        try {\r\n            const data = await axios.get(`https://8oi9s0nnth.apigw.ntruss.com/corona19-masks/v1/storesByGeo/json?lat=${position.lat}&lng=${position.lng}&m=1000`)\r\n            return setStoreData(data.data.stores)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    useEffect(MaskData, [])\r\n\r\n    const colorWheel = (i) => {\r\n        if (i.remain_stat === \"few\") {\r\n            return \"red\"\r\n        }\r\n        else if (i.remain_stat === \"some\") {\r\n            return \"yellow\"\r\n        }\r\n        else if (i.remain_stat === \"plenty\") {\r\n            return \"green\"\r\n        }\r\n        else {\r\n            return \"gray\"\r\n        }\r\n    }\r\n\r\n    const alertMessage = (i) => {\r\n        switch (i.remain_stat) {\r\n            case 'empty':\r\n                return alert(`${i.name}에는 마스크가 없어요`)\r\n\r\n            case 'few':\r\n                return alert(`${i.name}에는 마스크가 조금 있어요(30개 미만)`)\r\n\r\n            case 'some':\r\n                return alert(`${i.name}에는 마스크가 어느 정도 있어요(100개 미만)`)\r\n\r\n            case 'plenty':\r\n                return alert(`${i.name}에는 마스크가 꽤 있어요(100개 미만)`)\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <NaverMap\r\n            mapDivId={'maps-getting-started-uncontrolled'}\r\n            style={{\r\n                margin: 'auto',\r\n                width: '100%',\r\n                height: '80vh',\r\n                position: 'relative'\r\n            }}\r\n            defaultZoom={17}\r\n            defaultCenter={{ lat: 37.3595704, lng: 127.105399 }}\r\n            center={latLng}\r\n            onCenterChanged={center => { setPosition({ lat: center._lat, lng: center._lng }) }}\r\n            onDragend={() => MaskData()}\r\n        >\r\n            {\r\n                storeData ? storeData.map(i => <Circle\r\n                    key={i.code}\r\n                    center={{ lat: i.lat, lng: i.lng }}\r\n                    radius={10}\r\n                    fillOpacity={0.5}\r\n                    fillColor={colorWheel(i)}\r\n                    strokeColor={'black'}\r\n                    clickable={true}\r\n                    onClick={() => alertMessage(i)}\r\n                />) : null\r\n            }\r\n            <div className=\"mapover\">\r\n                <ul >\r\n                    <li>100개 이상</li>\r\n                    <li>30개 이상</li>\r\n                    <li>30개 미만</li>\r\n                    <li>0개</li>\r\n                </ul>\r\n            </div>\r\n        </NaverMap >\r\n    );\r\n}\r\n\r\n\r\nfunction Map({ latLng }) {\r\n    return (\r\n        <>\r\n            <RenderAfterNavermapsLoaded\r\n                ncpClientId={'1gzg5f9gv9'} // 자신의 네이버 계정에서 발급받은 Client ID\r\n                error={<p>Maps Load Error</p>}\r\n                loading={<p>Maps Loading...</p>}\r\n            >\r\n                <NaverMapAPI latLng={latLng} />\r\n            </RenderAfterNavermapsLoaded>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React, { useEffect, useState } from 'react'\r\nimport Map from './Map'\r\nimport { MdGpsFixed } from \"react-icons/md\";\r\n\r\nfunction MapGeo() {\r\n    const [latLng, setLatLng] = useState({ lat: null, lng: null })\r\n\r\n    const askForCoords = () => {\r\n        const handleGeoSuccess = (position) => {\r\n            const latitude = position.coords.latitude\r\n            const longitude = position.coords.longitude\r\n            setLatLng({ lat: latitude, lng: longitude })\r\n        }\r\n        const handleGeoError = () => {\r\n            console.error('위치 정보를 획득 실패!')\r\n        }\r\n        navigator.geolocation.getCurrentPosition(handleGeoSuccess, handleGeoError)\r\n    }\r\n\r\n    useEffect(() => askForCoords(), [])\r\n    return (\r\n        <>\r\n            <div className=\"position\">\r\n                <MdGpsFixed className=\"icon\" onClick={() => askForCoords()} />\r\n                <Map latLng={latLng} />\r\n            </div>\r\n        </>)\r\n}\r\n\r\nexport default MapGeo","import React from 'react'\r\nimport Header from './partials/Header'\r\nimport Footer from './partials/Footer'\r\nimport MapGeo from '../map/MapGeo'\r\n\r\nfunction Main() {\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <MapGeo />\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport Main from './component/main/Main';\nimport { HashRouter, Route, Switch } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path='/' component={Main} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}